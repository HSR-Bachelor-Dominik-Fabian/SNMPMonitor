<script type="text/javascript">
 $(document).ready(function () { var connection = $.hubConnection(); connection.logging = true; var notifications = connection.createHubProxy("snmpDataHub"); notifications.on("receiveData", function (dataValue) { if (dataValue.ObjectID == "1.3.6.1.2.1.25.2.3") { appendPointLine1(dataValue); } }); createChartLine1(); connection.start().done(function () { notifications.invoke("joinDataGroup","Agent_1"); }).fail(function (e) { alert("SignalRError for AgentNR:1 " +e); }); }); function appendPointLine1(json) { console.log(json); var chart = $("#Chart1_Memory").highcharts(); var shift = chart.series[0].data.length >= 20; var usedMemoryPers; try { var memoryResult = JSON.parse(json.Result); var index = 0; for(var i = 0; i < memoryResult["Results"].length; i++) { } if(memoryResult["Results"].length > 0) {  var totalMemory = ((memoryResult["Results"])[19]).Value * ((memoryResult["Results"])[24]).Value;  var usedMemory = ((memoryResult["Results"])[19]).Value * ((memoryResult["Results"])[29]).Value; var usedMemoryPers = (usedMemory / totalMemory) * 100; console.log(usedMemoryPers + ': ' + new Date(json.MonitorTimestamp)); chart.series[0].addPoint({ x:Date.parse(json.MonitorTimestamp + "+02:00"), y:Math.round(usedMemoryPers)}, true, shift); console.log(chart.series[0].data); } else { console.log("no memory data"); } } catch (e) { console.log(e); } } function createChartLine1() { Highcharts.setOptions({ global: { useUTC: false } }); $("#Chart1_Memory").highcharts({ chart: { type: 'line', height: 300, animation: Highcharts.svg }, title: { text: 'RAM Auslastung Verlauf' }, xAxis: { type: 'datetime' }, yAxis: { title: { text: 'in %' }, min: 0, max: 100 }, exporting: { enabled: false }, credits: { enabled: false }, legend: { enabled: false }, series: [{ name: "RAM Auslastung", data: (function () { var newdata = []; $.ajax({ url: '/Data/HistoryDataForOID', data: 'id=1&oid=1.3.6.1.2.1.25.2.3&count=20', async: false, cache: false, method: 'Get', success: function (data) { $.each(data.History, function(index, value) { var usedMemoryPers; try { var memoryResult = JSON.parse(value.Result); if(memoryResult.Results.length > 0) { // Allocation Units * Size var totalMemory = ((memoryResult["Results"])[19]).Value * ((memoryResult["Results"])[24]).Value; // Allocation Units * Used Memory var usedMemory = ((memoryResult["Results"])[19]).Value * ((memoryResult["Results"])[29]).Value; var usedMemoryPers = (usedMemory / totalMemory) * 100; newdata.push({ x:new Date(parseInt(value.MonitorTimestamp.replace("/Date(", "").replace(")/", ""))), y:parseInt(Math.round(usedMemoryPers))}); } else { console.log("no memory data"); } } catch (e) { console.log(e); } }); } }); return newdata; }()) }] }); }
</script>