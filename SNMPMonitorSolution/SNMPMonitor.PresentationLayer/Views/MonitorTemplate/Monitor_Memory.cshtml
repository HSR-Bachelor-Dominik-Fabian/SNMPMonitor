<script type="text/javascript">
    $(document).ready(function () {
        $("#Chart{{=it.AgentNr}}_Memory").on("receiveDataForNr{{=it.AgentNr}}", function (event, dataValue) {
            if (dataValue.ObjectID == "1.3.6.1.2.1.25.2.3") {
                appendPointToMemoryLine{{=it.AgentNr}}(dataValue);
            }
        });

        createMemoryChartLine{{=it.AgentNr}}();
    });

    function calcUsedMemoryPers(memoryResult) {
        var output = null;
        try {
        
            var indexOfMemory = findIndexForStorage(memoryResult, "Physical");
            var memoryAllocationUnits;
            $.each(memoryResult["Results"], function(index, value) {
                if (value.OID.indexOf("1.3.6.1.2.1.25.2.3.1.4." + indexOfMemory) >= 0) {
                    memoryAllocationUnits = value.Value;
                }
            });
            var memoryStorage;
            $.each(memoryResult["Results"], function(index, value) {
                if (value.OID.indexOf("1.3.6.1.2.1.25.2.3.1.5." + indexOfMemory) >= 0) {
                    memoryStorage = value.Value;
                }
            });
            var memoryUsedStorage;
            $.each(memoryResult["Results"], function(index, value) {
                if (value.OID.indexOf("1.3.6.1.2.1.25.2.3.1.6." + indexOfMemory) >= 0) {
                    memoryUsedStorage = value.Value;
                }
            });
            var totalMemory = memoryAllocationUnits * memoryStorage;
            var usedMemory = memoryAllocationUnits * memoryUsedStorage;
            var usedMemoryPers = (usedMemory / totalMemory) * 100;
            output = usedMemoryPers;
        } catch (e) {
            console.log(e);
        }
        return output;
    }

    function findIndexForStorage(json, storageDescr) {
        var output = -1;
        var tmpArray = new Array();
        $.each(json["Results"], function(index, value) {
            var oid = value.OID;
            if (oid.indexOf("1.3.6.1.2.1.25.2.3.1.3") >= 0) {
                tmpArray.push(value);
            }
        });
        $.each(tmpArray, function(index, value) {
            if (value.Value.indexOf(storageDescr) >= 0) {
                output = index + 1;
            }
        });
        return output;
    }

    function appendPointToMemoryLine{{=it.AgentNr}}(json) {
        var chart = $("#Chart{{=it.AgentNr}}_Memory").highcharts();
        var shift = chart.series[0].data.length >= 20;
        var usedMemoryPers;
        try {
            var memoryResult = JSON.parse(json.Result);
            if(memoryResult["Results"].length > 0)
            {
                usedMemoryPers = calcUsedMemoryPers(memoryResult);
                chart.series[0].addPoint({ x:Date.parse(json.MonitorTimestamp), y:Math.round(usedMemoryPers)}, true, shift);
            } else {
                console.log("no memory data");
            }
        } catch (e) {
            console.log(e);
        }
    }

    function createMemoryChartLine{{=it.AgentNr}}() {
        Highcharts.setOptions({
            global: {
                useUTC: false
            }
        });
        $("#Chart{{=it.AgentNr}}_Memory").highcharts({
            chart: {
                type: 'line',
                height: 300,
                animation: Highcharts.svg
            },
            title: {
                text: 'RAM Auslastung'
            },
            xAxis: {
                type: 'datetime'
            },
            yAxis: {
                title: {
                    text: 'in %'
                },
                min: 0,
                max: 100
            },
            exporting: {
                enabled: false
            },
            credits: {
                enabled: false
            },
            legend: {
                enabled: false
            },
            series: [{
                name: "RAM Auslastung",
                data: (function () {
                    var newdata = [];
                    $.ajax({
                        url: '@Url.Action("HistoryDataForOID","Data")',
                        data: 'id={{=it.AgentNr}}&oid=1.3.6.1.2.1.25.2.3&count=20',
                        async: false,
                        cache: false,
                        method: 'Get',
                        success: function (data) {
                            $.each(data.History, function(index, value) {
                                var usedMemoryPers;
                                try {
                                    var memoryResult = JSON.parse(value.Result);
                                    if(memoryResult.Results.length > 0)
                                    {
                                        usedMemoryPers = calcUsedMemoryPers(memoryResult);
                                        newdata.push({ x:Date.parse(value.MonitorTimestamp), y:parseInt(Math.round(usedMemoryPers))});
                                    } else {
                                        console.log("no memory data");
                                    }
                                } catch (e) {
                                    console.log(e);
                                }
                            });
                        }
                    });
                    return newdata;
                }())
            }]
        });
    }
</script>
<div id="Chart{{=it.AgentNr}}_Memory" class="col-xs-12 col-lg-4 col-md-6">

</div>