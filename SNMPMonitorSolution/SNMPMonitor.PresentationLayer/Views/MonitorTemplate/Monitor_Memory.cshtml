<script type="text/javascript">
    $(document).ready(function () {
        var connection = $.hubConnection();
        connection.logging = true;
        var notifications = connection.createHubProxy("snmpDataHub");
        notifications.on("receiveData", function (dataValue) {
            if (dataValue.ObjectID == "1.3.6.1.2.1.25.2.3") {
                appendPointToMemoryLine{{=it.AgentNr}}(dataValue);
            }
        });

        createMemoryChartLine{{=it.AgentNr}}();

        connection.start().done(function () {
            notifications.invoke("joinDataGroup","Agent_{{=it.AgentNr}}");
        }).fail(function (e) {
            alert("SignalRError for AgentNR:{{=it.AgentNr}} " +e);
        });
    });

    function findStartOfPhysicalMemory(json) {
        var output = -1;
        var indexFound = false;
        var index = 0;
        while (!indexFound) {
            var string = ((json["Results"])[index]).Value;
            if (string.indexOf("Physical") >= 0) {
                output = index;
                indexFound = true;
            } else {
                index++;
            }
        }
        return output;
    }

    function appendPointToMemoryLine{{=it.AgentNr}}(json) {
        console.log(json);
        var chart = $("#Chart{{=it.AgentNr}}_Memory").highcharts();
        var shift = chart.series[0].data.length >= 20;
        var usedMemoryPers;
        try {
            var memoryResult = JSON.parse(json.Result);
            var index = 0;
            for(var i = 0; i < memoryResult["Results"].length; i++)
            {

            }
            if(memoryResult["Results"].length > 0)
            {
                var startMemory = findStartOfPhysicalMemory(memoryResult);

                var memoryIndex = (startMemory + 1) / 3;
                var memoryAllocationUnits = startMemory + memoryIndex;
                var memoryStorage = startMemory + (2 * memoryIndex);
                var memoryUsedStorage = startMemory + (3 * memoryIndex);

                var totalMemory = ((memoryResult["Results"])[memoryAllocationUnits]).Value * ((memoryResult["Results"])[memoryStorage]).Value;               
                var usedMemory = ((memoryResult["Results"])[memoryAllocationUnits]).Value * ((memoryResult["Results"])[memoryUsedStorage]).Value;
                var usedMemoryPers = (usedMemory / totalMemory) * 100;

                console.log(usedMemoryPers + ': ' + new Date(json.MonitorTimestamp));
                chart.series[0].addPoint({ x:Date.parse(json.MonitorTimestamp + "+02:00"), y:Math.round(usedMemoryPers)}, true, shift);
                console.log(chart.series[0].data);
            } else {
                console.log("no memory data");
            }
        } catch (e) {
            console.log(e);
        }
    }

    function createMemoryChartLine{{=it.AgentNr}}() {
        Highcharts.setOptions({
            global: {
                useUTC: false
            }
        });
        $("#Chart{{=it.AgentNr}}_Memory").highcharts({
            chart: {
                type: 'line',
                height: 300,
                animation: Highcharts.svg
            },
            title: {
                text: 'RAM Auslastung'
            },
            xAxis: {
                type: 'datetime'
            },
            yAxis: {
                title: {
                    text: 'in %'
                },
                min: 0,
                max: 100
            },
            exporting: {
                enabled: false
            },
            credits: {
                enabled: false
            },
            legend: {
                enabled: false
            },
            series: [{
                name: "RAM Auslastung",
                data: (function () {
                    var newdata = [];
                    $.ajax({
                        url: '@Url.Action("HistoryDataForOID","Data")',
                        data: 'id={{=it.AgentNr}}&oid=1.3.6.1.2.1.25.2.3&count=20',
                        async: false,
                        cache: false,
                        method: 'Get',
                        success: function (data) {
                            var tmp = JSON.parse(data.History[0].Result);
                            var startMemory = findStartOfPhysicalMemory(tmp);
                            $.each(data.History, function(index, value) {
                                var usedMemoryPers;
                                try {
                                    var memoryResult = JSON.parse(value.Result);
                                    if(memoryResult.Results.length > 0)
                                    {
                                        var memoryIndex = (startMemory + 1) / 3;
                                        var memoryAllocationUnits = startMemory + memoryIndex;
                                        var memoryStorage = startMemory + (2 * memoryIndex);
                                        var memoryUsedStorage = startMemory + (3 * memoryIndex);
                                        
                                        var totalMemory = ((memoryResult["Results"])[memoryAllocationUnits]).Value * ((memoryResult["Results"])[memoryStorage]).Value;               
                                        var usedMemory = ((memoryResult["Results"])[memoryAllocationUnits]).Value * ((memoryResult["Results"])[memoryUsedStorage]).Value;
                                        var usedMemoryPers = (usedMemory / totalMemory) * 100;
                                        newdata.push({ x:new Date(parseInt(value.MonitorTimestamp.replace("/Date(", "").replace(")/", ""))), y:parseInt(Math.round(usedMemoryPers))});
                                    } else {
                                        console.log("no memory data");
                                    }
                                } catch (e) {
                                    console.log(e);
                                }
                            });
                        }
                    });
                    return newdata;
                }())
            }]
        });
    }
</script>
<div id="Chart{{=it.AgentNr}}_Memory" class="col-xs-12 col-lg-4 col-md-6">

</div>